C:\Users\Geetha>git config --global user.name "geetha"

C:\Users\Geetha>git config --global user.email "geethainfy@gmail.com"

git config --list

git config user.name


1)git init


echo "# wired-brain-recipies" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/geetha19983b/wired-brain-recipies.git
git push -u origin master

git remote add origin https://github.com/geetha19983b/wired-brain-recipies.git
git push -u origin master

git status
git status -s
git status --short

git diff
git diff --staged
git diff --staged --no-renames

# add to staging area and commit
git commit -a -m "add new vendor"

#push changes to master branch 
git push origin master

#show history of commits
git log

#limit log output to one
git log -1

#list of all commits in single line format
git log --oneline

#detail view of all the commits
git log --stat

#show detail in bit by bit
git log --patch

# to remove file from git tracking and remove from project
git rm vendors.txt

#untrack files but not remove it from project
git rm --cached filename

# to create a new branch
git checkout -b new_branch

git checkout master

git checkout new_branch

# to stash files
git add .
git stash

git stash list
git stash show

# move stash changes to working diretcory
git stash pop

#merge to to branch u want to merge to 
#merges new_branch changes to master
git merge new_branch

#git reset to move commit from history to staging area
#move to staging area
git log --oneline
git reset --soft commitid
# move to working directory
git reset --mixed commitid
#move changes to trash
git reset --hard

git checkout -b branchname
git add .
git commit -m "commits for new branch"
git checkout master

#list your branches
git branch
#switch to a different branch
git checkout branchname

# go to branch which u wanted to brnach from and then create a branch
git checkout master
git checkout -b branchname

#to rename a branch
git branch -m <old-branch> <new-branch>

#to delete a branch
git branch -d branchname

#to force delete
git branch -D branchname



#to merge
git checkout <target-branch>
git merge <source-branch>

#compare branch

git diff <branch1> <branch2>

#clean up local history
#pull change from another branch without performing merge
#see branch history
git log --oneline
#gt original base of ticket1 branch created from master
git merge-base ticket1 master
#start rebase from the commit sha
git rebase -i <commit-sha>


D:\pluralsight\gitlearn\wired-brain-recipies>git log --oneline
82815cd threee
1b6f5c9 two
44125ed one
e927889 added solution 1 file

#rebase ticket1 from the point it was created from master
git merge-base ticket1 master
e927889f01da664b35c4fd935663c5af152b3d8d

git rebase -i e927889f01da664b35c4fd935663c5af152b3d8d

#squash will combine the two commits to one
pick 44125ed one
squash 1b6f5c9 two
squash 82815cd threee

#to see detail of all the operation
git reflog

#cherry pick
git log --oneline
git log branchname --oneline

# go to branch to where u want to put the commit
git checkout <branch-name>
git cherry-pick <commit>

#find the commit which u want to cherry pick in each branch
#switch then to master
D:\pluralsight\gitlearn\wired-brain-recipies>git log --oneline
e2501f8 try 3 in y

git checkout x

D:\pluralsight\gitlearn\wired-brain-recipies>git log --oneline
86caae4 try3

git checkout master

git cherry-pick 86caae4
git cherry-pick e2501f8

git log --oneline

git pull

git push

git merge --abort

git rebase origin/master
git push

git checkout -b feature 4
# add and commit and then push the branch to remote
git push -u origin feature 4

#to see branches on  the remote
git ls-remote

#to fetch feature 4 branch from remote
git fetch origin feature4
git branch
git branch -a
git checkout --track origin/feature
